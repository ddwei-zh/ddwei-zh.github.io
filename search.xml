<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端模块化的思考</title>
      <link href="/2020/07/05/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
      <url>/2020/07/05/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h2 id="commonJs"><a href="#commonJs" class="headerlink" title="commonJs"></a><code>commonJs</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">require()</span><br><span class="line">同步</span><br></pre></td></tr></table></figure><h2 id="AMD-amp-require-js"><a href="#AMD-amp-require-js" class="headerlink" title="AMD &amp; require.js"></a><code>AMD &amp; require.js</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">异步</span><br><span class="line">依赖前置 提前执行</span><br><span class="line">define([],function() &#123;</span><br><span class="line"></span><br><span class="line">&#125;) </span><br><span class="line">require([],function() &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="CMD-amp-sea-js"><a href="#CMD-amp-sea-js" class="headerlink" title="CMD &amp; sea.js"></a><code>CMD &amp; sea.js</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">依赖就近、延迟执行</span><br><span class="line">define(function(require,exports,module) &#123;</span><br><span class="line">    &lt;!-- 需要时声明 --&gt;</span><br><span class="line">&#125;)</span><br><span class="line">seajs.use([],function() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a><code>ES6</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编译时加载</span><br></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a><code>区别</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">值拷贝 -&gt; 值引用</span><br><span class="line">运行时加载 -&gt; 编译时加载</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端常见下载方法的总结</title>
      <link href="/2020/07/05/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/2020/07/05/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://juejin.im/post/5d254a846fb9a07efd47337e" target="_blank" rel="noopener">常用的下载方式</a><h2 id="接口是下载文件的路径"><a href="#接口是下载文件的路径" class="headerlink" title="接口是下载文件的路径"></a>接口是下载文件的路径</h2></li></ul><ol><li><code>window</code></li><li><code>location</code></li><li><code>a</code></li><li><code>iframe</code></li><li><code>form的action触发</code><h2 id="使用blob下载二进制流"><a href="#使用blob下载二进制流" class="headerlink" title="使用blob下载二进制流"></a><code>使用blob下载二进制流</code></h2></li></ol><ul><li>先请求数据下载</li></ul><ul><li>fetch</li><li>XMLhTTP<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">netDiskMaterialFileDownload(filePath,fileName,startFn,endFn,errorFn) &#123;</span><br><span class="line">    startFn()</span><br><span class="line">    axios(&#123;</span><br><span class="line">      url: filePath,</span><br><span class="line">      method: &#39;get&#39;,</span><br><span class="line">      responseType: &#39;blob&#39;</span><br><span class="line">    &#125;).then( res &#x3D;&gt; &#123;</span><br><span class="line">       endFn()</span><br><span class="line">       let blob &#x3D; new Blob([res.data], &#123;</span><br><span class="line">        type: &#39;application&#x2F;octet-stream&#39;  &#x2F;&#x2F; 下载的文件类型格式（二进制流，不知道下载文件类型可以设置为这个）, 具体请查看HTTP Content-type 对照表</span><br><span class="line">      &#125;)</span><br><span class="line">      if (window.navigator &amp;&amp; window.navigator.msSaveOrOpenBlob) &#123;  &#x2F;&#x2F; IE下对blob的兼容处理</span><br><span class="line">        window.navigator.msSaveOrOpenBlob(blob, fileName);</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      let url &#x3D; URL.createObjectURL(blob)</span><br><span class="line">      let a &#x3D; document.createElement(&#39;a&#39;)</span><br><span class="line">      a.style.display &#x3D; &#39;none&#39;</span><br><span class="line">      a.href &#x3D; url</span><br><span class="line">      a.setAttribute(&#39;download&#39;, fileName)   &#x2F;&#x2F; 设置下载的文件名</span><br><span class="line">      document.body.appendChild(a) </span><br><span class="line">      a.click()</span><br><span class="line">      document.body.removeChild(a)       &#x2F;&#x2F;下载完成移除dom元素</span><br><span class="line">      URL.revokeObjectURL(url)  &#x2F;&#x2F;释放blob对象</span><br><span class="line">    &#125;).catch(err &#x3D;&gt; &#123;</span><br><span class="line">      endFn()</span><br><span class="line">      errorFn(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="大文件下载"><a href="#大文件下载" class="headerlink" title="大文件下载"></a><code>大文件下载</code></h2></li></ul><ul><li><code>请求超时问题</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">临时通过改变axios的超时时间解决</span><br><span class="line">  禁止先请求数据然后下载的方式</span><br><span class="line">  应该服务设置Content-Type: attachment;filename&#x3D;xxx (附件) &#x2F; inline;filename&#x3D;xxx (内连)</span><br><span class="line">  默认是直接打开</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用</title>
      <link href="/2020/07/05/git%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/07/05/git%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="github"><a href="#github" class="headerlink" title="github"></a><code>github</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基于git 在线代码仓库 网站界面 互联网开放</span><br></pre></td></tr></table></figure><h3 id="gitlab"><a href="#gitlab" class="headerlink" title="gitlab"></a><code>gitlab</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基于git   在线码仓库软件 搭建类似github的系统 内部网络git私服 Auto Dev Ops</span><br></pre></td></tr></table></figure><h3 id="git的安装与使用"><a href="#git的安装与使用" class="headerlink" title="git的安装与使用"></a><code>git的安装与使用</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  命令 工具 版本控制系统</span><br></pre></td></tr></table></figure><ul><li><code>https&amp;ssh两种方式</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~ win表示是c:\Users\admin</span><br><span class="line">--ssh </span><br><span class="line">    ssh-keygen -t rsa -b 4096 -C &quot;1335950102@qq.com&quot;</span><br><span class="line">    ls -al ~&#x2F;.ssh</span><br><span class="line">    ssh -T git@github.com</span><br><span class="line">    git@github.com:ddwei-zh&#x2F;vuecli4.0Demo.git</span><br><span class="line">--https</span><br><span class="line">    https:&#x2F;&#x2F;github.com&#x2F;ddwei-zh&#x2F;vuecli4.0Demo.git</span><br></pre></td></tr></table></figure></li><li><code>[常用的命令](https://www.jianshu.com/p/38921d19ba0a)</code></li></ul><p>– 本地新建一个文件夹，初始化.git后，使用git remote add origin xxx建立仓库联系<br>–  添加到暂存区git add<br>–  提交到本地仓库 git commit -m<br>– 更改提交日志 git –ammend<br>– 查看本地分支 git branch<br>– 查看仓库分支 git branch -a<br>– 使用git pull 更新分支信息<br>– git checkout -a xx （新建并建立分支）</p><blockquote><p>个人常用命令</p></blockquote><ul><li>丢弃修改（本地修改或者暂存区的修改）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore</span><br></pre></td></tr></table></figure></li><li>储藏与恢复 (用于暂存区与工作区)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash 保存现场</span><br><span class="line">git stash pop stash@&#123;num&#125; | git stash apply stash@&#123;num&#125;</span><br></pre></td></tr></table></figure></li><li>回退(reset revert)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. git revert commitCode (通过git <span class="built_in">log</span>查看,需要撤销的版本，会新建一次commit,回退后push时需要注意可能存在conflict)</span><br><span class="line">2.git reset --soft(回退commit)|--mixed(默认,回退commit与add|--hard(回退到上次commit) commitCode (需要回退到的版本)</span><br></pre></td></tr></table></figure><blockquote><p>工具 </p></blockquote></li></ul><ol><li>git gitGui</li><li>sourceTree 、beyondCompare（代码比对）</li></ol>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ant-design-vue和element-ui中的表格合同列的相同行的方法</title>
      <link href="/2020/07/05/ant-design-vue%E4%BB%A5%E5%8F%8Aelement-ui%E4%B8%AD%E8%A1%A8%E6%A0%BC%E6%8C%89%E5%88%97%E5%90%88%E5%B9%B6%E7%9B%B8%E5%90%8C%E8%A1%8C/"/>
      <url>/2020/07/05/ant-design-vue%E4%BB%A5%E5%8F%8Aelement-ui%E4%B8%AD%E8%A1%A8%E6%A0%BC%E6%8C%89%E5%88%97%E5%90%88%E5%B9%B6%E7%9B%B8%E5%90%8C%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="ant-design-vue"><a href="#ant-design-vue" class="headerlink" title="ant-design-vue"></a><strong>ant-design-vue</strong></h2><ul><li><code>设置表格列属性的自定义属性</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">customRender: (value, row, index) &#x3D;&gt; &#123;</span><br><span class="line">                const obj &#x3D; &#123;</span><br><span class="line">                  children: value,</span><br><span class="line">                  attrs: &#123;&#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                obj.attrs.rowSpan &#x3D; this.myArray[index];</span><br><span class="line">                return obj;</span><br><span class="line">              &#125;</span><br></pre></td></tr></table></figure></li><li><code>定义合并单元格方法</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">func(data) &#123;</span><br><span class="line">     &#x2F;&#x2F;保存上一个name</span><br><span class="line">     var x &#x3D; &quot;&quot;;</span><br><span class="line">     &#x2F;&#x2F;相同name出现的次数</span><br><span class="line">     var count &#x3D; 0;</span><br><span class="line">     &#x2F;&#x2F;该name第一次出现的位置</span><br><span class="line">     var startindex &#x3D; 0;</span><br><span class="line"></span><br><span class="line">     for (var i &#x3D; 0; i &lt; data.length; i++) &#123;</span><br><span class="line">       &#x2F;&#x2F;根据学校id进行合并</span><br><span class="line">       var val &#x3D; data[i].schoolId;</span><br><span class="line">       if (i &#x3D;&#x3D; 0) &#123;</span><br><span class="line">         x &#x3D; val;</span><br><span class="line">         count &#x3D; 1;</span><br><span class="line">         this.myArray[0] &#x3D; 1; &#x2F;&#x2F; []</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">         if (val &#x3D;&#x3D; x) &#123;</span><br><span class="line">           count++;</span><br><span class="line">           this.myArray[startindex] &#x3D; count;</span><br><span class="line">           this.myArray[i] &#x3D; 0;</span><br><span class="line">         &#125; else &#123;</span><br><span class="line">           count &#x3D; 1;</span><br><span class="line">           x &#x3D; val;</span><br><span class="line">           startindex &#x3D; i;</span><br><span class="line">           this.myArray[i] &#x3D; 1;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><code>调用合并单元格的方法</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.myArray &#x3D; new Array(this.tableData.length);</span><br><span class="line">this.func(this.tableData);</span><br></pre></td></tr></table></figure></li></ul><hr><hr><h2 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a><code>element-ui</code></h2><ul><li><code>el-table设置属性</code> span-method=”objectSpanMethod</li><li><code>合并行方法</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function objectSpanMethod (&#123; row, column, rowIndex, columnIndex &#125;) &#123;</span><br><span class="line">    if (columnIndex &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">      &#x2F;&#x2F; 第一列相同学校的单元格合并</span><br><span class="line">      const _row &#x3D; this.spanArr[0][rowIndex]</span><br><span class="line">      return &#123;</span><br><span class="line">        rowspan: _row,</span><br><span class="line">        colspan: 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><code>计算合并的行数</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">rowspan (idx, prop) &#123;</span><br><span class="line">       this.spanArr[idx] = [] // []</span><br><span class="line">       this.position = 0  // 0</span><br><span class="line">       &lt;!-- 要合并的表格数据 --&gt;</span><br><span class="line">       this.tableData.forEach((item, index) =&gt; &#123;</span><br><span class="line">         <span class="keyword">if</span> (index === 0) &#123;</span><br><span class="line">           this.spanArr[idx].push(1)</span><br><span class="line">           this.position = 0</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (</span><br><span class="line">             this.tableData[index][<span class="string">'listenSchoolId'</span>] ===</span><br><span class="line">             this.tableData[index - 1][<span class="string">'listenSchoolId'</span>]</span><br><span class="line">           ) &#123;</span><br><span class="line">             this.spanArr[idx][this.position] += 1 // 有相同项</span><br><span class="line">             this.spanArr[idx].push(0) // 名称相同后往数组里面加一项0</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             this.spanArr[idx].push(1) // 同列的前后两行单元格不相同</span><br><span class="line">             this.position = index</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地启动服务看vue应用在线上的效果</title>
      <link href="/2020/07/05/%E6%9C%AC%E5%9C%B0%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E7%9C%8Bvue%E5%BA%94%E7%94%A8%E5%9C%A8%E7%BA%BF%E4%B8%8A%E7%9A%84%E6%95%88%E6%9E%9C/"/>
      <url>/2020/07/05/%E6%9C%AC%E5%9C%B0%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E7%9C%8Bvue%E5%BA%94%E7%94%A8%E5%9C%A8%E7%BA%BF%E4%B8%8A%E7%9A%84%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="使用http-server"><a href="#使用http-server" class="headerlink" title="使用http-server"></a>使用http-server</h2><h2 id="使用express搭建本地node服务"><a href="#使用express搭建本地node服务" class="headerlink" title="使用express搭建本地node服务"></a>使用express搭建本地node服务</h2><blockquote><p>npm install -g express-generator<br>express projectName<br>cd projectName<br>npm install<br>将打包的dist文件夹下的文件拷贝到express工程的public目录下<br>npm run start启动node服务<br>浏览器输入<a href="http://localhost:3000/#/" target="_blank" rel="noopener">http://localhost:3000/#/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装一个拖曳&amp;缩放组件</title>
      <link href="/2020/07/05/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E6%8B%96%E6%9B%B3&amp;%E7%BC%A9%E6%94%BE%E7%BB%84%E4%BB%B6/"/>
      <url>/2020/07/05/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E6%8B%96%E6%9B%B3&amp;%E7%BC%A9%E6%94%BE%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="常用的组件"><a href="#常用的组件" class="headerlink" title="常用的组件"></a>常用的组件</h1><ul><li><a href="https://juejin.im/post/5beb9423e51d4577f96e8d24" target="_blank" rel="noopener">vue-drag-resize</a></li><li><a href="https://segmentfault.com/a/1190000016445230" target="_blank" rel="noopener">vue-draggable-resizeable</a>  <h2 id="手写一个"><a href="#手写一个" class="headerlink" title="手写一个"></a>手写一个</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line">    &#x2F;**</span><br><span class="line"> * @author ddwei</span><br><span class="line"> * @description 拖拽缩放插件</span><br><span class="line"> *&#x2F;</span><br><span class="line">export default class Drag_scale &#123;</span><br><span class="line">  constructor(target, options) &#123;</span><br><span class="line">    this._init(target, options);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 初始化绑定节点</span><br><span class="line">   * @param &#123;HTMLElement|String&#125; target 目标元素</span><br><span class="line">   * @param &#123;Object&#125; options 选项</span><br><span class="line">   *&#x2F;</span><br><span class="line">  _init(target, options) &#123;</span><br><span class="line">    if (!target) throw new Error(&quot;el为必填项&quot;);</span><br><span class="line"></span><br><span class="line">    this.el &#x3D;</span><br><span class="line">      typeof target &#x3D;&#x3D;&#x3D; &quot;string&quot; ? document.querySelector(target) : target;</span><br><span class="line"></span><br><span class="line">    this._defaultOptions &#x3D; &#123;</span><br><span class="line">      rotate: 0, &#x2F;&#x2F; 图旋转角度</span><br><span class="line">      minScale: 1, &#x2F;&#x2F; 最小缩放比例</span><br><span class="line">      maxScale: 3 &#x2F;&#x2F; 最大缩放比例</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    this.options &#x3D; &#123;</span><br><span class="line">      ...this._defaultOptions,</span><br><span class="line">      ...options</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 缩放</span><br><span class="line">    this.maxScale &#x3D; this.options.maxScale;</span><br><span class="line">    this.minScale &#x3D; this.options.minScale;</span><br><span class="line">    this.scale &#x3D; this.options.scale || 1; &#x2F;&#x2F; 初始缩放比例设置为1</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 拖拽</span><br><span class="line">    this.dragTransformX &#x3D; 0;</span><br><span class="line">    this.dragTransformY &#x3D; 0;</span><br><span class="line">    &#x2F;&#x2F;拖拽历史点</span><br><span class="line">    this.lastDragPoint &#x3D; &#123;</span><br><span class="line">      x: 0,</span><br><span class="line">      y: 0</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    this.rotate &#x3D; this.options.rotate;</span><br><span class="line"></span><br><span class="line">    this.eventList &#x3D; [</span><br><span class="line">      &#123;</span><br><span class="line">        name: &quot;mousemove&quot;,</span><br><span class="line">        handler: this._handleDragMove.bind(this)</span><br><span class="line">      &#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 绑定事件对象</span><br><span class="line">    this.el.addEventListener(&quot;mousedown&quot;, e &#x3D;&gt; &#123;</span><br><span class="line">      this._handleDragStart(e);</span><br><span class="line">      this.eventList.forEach((&#123; name, handler &#125;) &#x3D;&gt; &#123;</span><br><span class="line">        this.el.addEventListener(name, handler, false);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 鼠标抬起解绑move事件</span><br><span class="line">    this.el.addEventListener(&quot;mouseup&quot;, e &#x3D;&gt; &#123;</span><br><span class="line">      this._cleanEvent(this.eventList);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 处理缩放,旋转，拖拽</span><br><span class="line">   *&#x2F;</span><br><span class="line">  _setTransform(x, y, scale, rotate, transition &#x3D; false) &#123;</span><br><span class="line">    if (!this.el) return;</span><br><span class="line"></span><br><span class="line">    const text &#x3D; &#96;transform:scale($&#123;scale&#125;) rotate($&#123;rotate&#125;deg) translate3d($&#123;x&#125;px,$&#123;y&#125;px,0);transform-origin:center;)&#96;;</span><br><span class="line">    const cssText &#x3D; transition ? text + &quot;transition:0.3s;&quot; : text;</span><br><span class="line"></span><br><span class="line">    this.el.setAttribute(&quot;style&quot;, cssText);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 设置缩放比例</span><br><span class="line">   * @param &#123;Number&#125; scale 缩放比例</span><br><span class="line">   *&#x2F;</span><br><span class="line">  setScale(scale) &#123;</span><br><span class="line">    let s &#x3D; parseFloat(scale);</span><br><span class="line">    if (isNaN(s)) return;</span><br><span class="line"></span><br><span class="line">    if (s &lt; this.minScale) s &#x3D; this.minScale;</span><br><span class="line">    if (s &gt; this.maxScale) s &#x3D; this.maxScale;</span><br><span class="line"></span><br><span class="line">    this.scale &#x3D; s;</span><br><span class="line"></span><br><span class="line">    this._setTransform(</span><br><span class="line">      this.dragTransformX,</span><br><span class="line">      this.dragTransformY,</span><br><span class="line">      this.scale,</span><br><span class="line">      this.rotate</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * scale + 0.1</span><br><span class="line">   *&#x2F;</span><br><span class="line">  makeScaleAddZeroPointOne() &#123;</span><br><span class="line">    let newScale &#x3D; this.scale + 0.1;</span><br><span class="line">    this.setScale(newScale);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * scale - 0.1</span><br><span class="line">   *&#x2F;</span><br><span class="line">  makeScaleSubtractZeroPointOne() &#123;</span><br><span class="line">    let newScale &#x3D; this.scale - 0.1;</span><br><span class="line">    this.setScale(newScale);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 旋转api</span><br><span class="line">   * @param   &#123;Number&#125;  direction  方向 1顺时针 -1逆时针</span><br><span class="line">   *&#x2F;</span><br><span class="line">  rotateHandler(direction &#x3D; 1) &#123;</span><br><span class="line">    if (![1, -1].includes(direction)) return;</span><br><span class="line"></span><br><span class="line">    this.rotate &#x3D; this.rotateFormat(this.rotate + direction * 90);</span><br><span class="line"></span><br><span class="line">    this._setTransform(</span><br><span class="line">      this.dragTransformX,</span><br><span class="line">      this.dragTransformY,</span><br><span class="line">      this.scale,</span><br><span class="line">      this.rotate</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 旋转角度处理</span><br><span class="line">   * @return  &#123;Number&#125;  旋转角</span><br><span class="line">   *&#x2F;</span><br><span class="line">  rotateFormat(angle) &#123;</span><br><span class="line">    if (typeof angle !&#x3D;&#x3D; &quot;number&quot; || isNaN(angle)) return;</span><br><span class="line"></span><br><span class="line">    const temp &#x3D; angle % 360;</span><br><span class="line">    const newAngle &#x3D; temp &lt; 0 ? temp + 360 : temp;</span><br><span class="line"></span><br><span class="line">    return Math.abs(newAngle);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 解绑事件</span><br><span class="line">  _cleanEvent(eventList) &#123;</span><br><span class="line">    if (!this.el || eventList.length &#x3D;&#x3D; 0) return;</span><br><span class="line">    eventList.forEach((&#123; name, handler &#125;) &#x3D;&gt; &#123;</span><br><span class="line">      this.el.removeEventListener(name, handler, false);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 处理指针结束</span><br><span class="line">   * @param &#123;MouseEvent|TouchEvent&#125; e 事件对象</span><br><span class="line">   * @returns void</span><br><span class="line">   *&#x2F;</span><br><span class="line">  _handlePointerEnd(e) &#123;</span><br><span class="line">    &#x2F;&#x2F; 解绑相关事件</span><br><span class="line">    this._cleanEvent(this.eventList);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 获取事件相对触发对象的偏移值</span><br><span class="line">   * @param &#123;MouseEvent|TouchEvent&#125; e 事件对象</span><br><span class="line">   * @returns 偏移值对象</span><br><span class="line">   *&#x2F;</span><br><span class="line">  _getPointOffset(e) &#123;</span><br><span class="line">    if (e instanceof MouseEvent) &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        x: e.offsetX,</span><br><span class="line">        y: e.offsetY</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; else if (e instanceof TouchEvent) &#123;</span><br><span class="line">      const &#123; touches, target &#125; &#x3D; e;</span><br><span class="line"></span><br><span class="line">      const &#123; clientX, clientY &#125; &#x3D; touches[0];</span><br><span class="line">      const &#123; left, top &#125; &#x3D; target.getBoundingClientRect();</span><br><span class="line"></span><br><span class="line">      return &#123;</span><br><span class="line">        x: clientX - left,</span><br><span class="line">        y: clientY - top</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 处理拖拽开始</span><br><span class="line">   *&#x2F;</span><br><span class="line">  _handleDragStart(e) &#123;</span><br><span class="line">    this.lastDragPoint &#x3D; this._getPointOffset(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 处理拖拽移动</span><br><span class="line">   *&#x2F;</span><br><span class="line">  _handleDragMove(e) &#123;</span><br><span class="line">    const &#123; x, y &#125; &#x3D; this._getPointOffset(e);</span><br><span class="line"></span><br><span class="line">    const &#123; x: lastX, y: lastY &#125; &#x3D; this.lastDragPoint;</span><br><span class="line"></span><br><span class="line">    this.dragTransformX +&#x3D; x - lastX;</span><br><span class="line">    this.dragTransformY +&#x3D; y - lastY;</span><br><span class="line"></span><br><span class="line">    this._setTransform(</span><br><span class="line">      this.dragTransformX,</span><br><span class="line">      this.dragTransformY,</span><br><span class="line">      this.scale,</span><br><span class="line">      this.rotate</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 绑定事件对象</span><br><span class="line">  _bindEvent() &#123;</span><br><span class="line">    &#x2F;&#x2F; this._handleDragStart &#x3D; this._handleDragStart.bind(this)</span><br><span class="line">    &#x2F;&#x2F; this._handleDragMove &#x3D; this._handleDragMove.bind(this)</span><br><span class="line">    &#x2F;&#x2F; this._handlePointerEnd &#x3D; this._handlePointerEnd.bind(this)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>使用方式</code>  <pre><code>new Drag_scale($el)</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义组件、指令、插件</title>
      <link href="/2020/07/05/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E3%80%81%E6%8C%87%E4%BB%A4%E3%80%81%E6%8F%92%E4%BB%B6/"/>
      <url>/2020/07/05/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E3%80%81%E6%8C%87%E4%BB%A4%E3%80%81%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  //注册局部组件指令</span><br><span class="line">directives: &#123;</span><br><span class="line">  drag: <span class="keyword">function</span>(el) &#123;</span><br><span class="line">    <span class="built_in">let</span> dragBox = el; //获取当前元素</span><br><span class="line">    dragBox.onmousedown = e =&gt; &#123;</span><br><span class="line">      //算出鼠标相对元素的位置</span><br><span class="line">      <span class="built_in">let</span> disX = e.clientX - dragBox.offsetLeft;</span><br><span class="line">      <span class="built_in">let</span> disY = e.clientY - dragBox.offsetTop;</span><br><span class="line">      document.onmousemove = e =&gt; &#123;</span><br><span class="line">        //用鼠标的位置减去鼠标相对元素的位置，得到元素的位置</span><br><span class="line">        <span class="built_in">let</span> left = e.clientX - disX;</span><br><span class="line">        <span class="built_in">let</span> top = e.clientY - disY;</span><br><span class="line">        //移动当前元素</span><br><span class="line">        dragBox.style.left = left + <span class="string">"px"</span>;</span><br><span class="line">        dragBox.style.top = top + <span class="string">"px"</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">      document.onmouseup = e =&gt; &#123;</span><br><span class="line">        //鼠标弹起来的时候不再移动</span><br><span class="line">        document.onmousemove = null;</span><br><span class="line">        //预防鼠标弹起来后还会循环（即预防鼠标放上去的时候还会移动）</span><br><span class="line">        document.onmouseup = null;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> directive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>file文件几种格式的相互转换</title>
      <link href="/2020/07/05/%E6%96%87%E4%BB%B6%E5%87%A0%E7%A7%8D%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
      <url>/2020/07/05/%E6%96%87%E4%BB%B6%E5%87%A0%E7%A7%8D%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="file、blob、canvas、dataUrl几种对象之间的转换"><a href="#file、blob、canvas、dataUrl几种对象之间的转换" class="headerlink" title="file、blob、canvas、dataUrl几种对象之间的转换"></a><code>file、blob、canvas、dataUrl几种对象之间的转换</code></h2><ul><li>blob|file对象转成dataUrl<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> readBlobAsDataURL (blob|file, callback) &#123;</span><br><span class="line">    <span class="built_in">let</span> fr = new FileReader()</span><br><span class="line">    fr.onload = <span class="keyword">function</span> (e) &#123;</span><br><span class="line">        callback &amp;&amp; callback(e.target.result)</span><br><span class="line">    &#125;</span><br><span class="line">    fr.readAsDataURL(blob)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>canvas转换成dataUrl</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">canvas.toDataURL(<span class="string">'image/png'</span>|<span class="string">'image/jpeg'</span>,0.8)</span><br></pre></td></tr></table></figure></li><li><code>dataUrl转换成blob</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> dataURLtoBlob (dataurl) &#123;</span><br><span class="line">    <span class="built_in">let</span> arr = dataurl.split(<span class="string">','</span>)</span><br><span class="line">    <span class="built_in">let</span> mime = arr[0].match(/:(.*?);/)[1]</span><br><span class="line">    <span class="built_in">let</span> bstr = atob(arr[1])</span><br><span class="line">    <span class="built_in">let</span> n = bstr.length</span><br><span class="line">    <span class="built_in">let</span> u8arr = new Uint8Array(n)</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        u8arr[n] = bstr.charCodeAt(n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> new Blob([u8arr], &#123; <span class="built_in">type</span>: mime &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>dataUrl转换成file</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">function</span> dataURLtoFile (dataurl, filename) &#123;</span><br><span class="line">    <span class="built_in">let</span> arr = dataurl.split(<span class="string">','</span>)</span><br><span class="line">    <span class="built_in">let</span> mime = arr[0].match(/:(.*?);/)[1]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> bstr = atob(arr[1])</span><br><span class="line">    <span class="built_in">let</span> n = bstr.length</span><br><span class="line">    <span class="built_in">let</span> u8arr = new Uint8Array(n)</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        u8arr[n] = bstr.charCodeAt(n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> new File([u8arr], filename, &#123; <span class="built_in">type</span>: mime &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>文件大小格式化</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> formateFileSize(fileSize) &#123;</span><br><span class="line">    <span class="keyword">if</span> (fileSize === 0) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'0.0M'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fileSize &lt; 1024) &#123;</span><br><span class="line">        <span class="built_in">return</span> `<span class="variable">$&#123;fileSize&#125;</span>B`</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileSize &lt; 1024 * 1024) &#123;</span><br><span class="line">        <span class="built_in">return</span> `<span class="variable">$&#123;(fileSize / 1024).toFixed(2)&#125;</span>KB`</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileSize &lt; 1024 * 1024 * 1024) &#123;</span><br><span class="line">        <span class="built_in">return</span> `<span class="variable">$&#123;(fileSize / 1024 / 1024).toFixed(2)&#125;</span>MB`</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">return</span> `<span class="variable">$&#123;(fileSize / 1024 / 1024 / 1024).toFixed(2)&#125;</span>GB`</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现文字超出展示展开全文的效果</title>
      <link href="/2020/07/05/%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E8%B6%85%E5%87%BA%E5%B1%95%E7%A4%BA%E5%B1%95%E5%BC%80%E5%85%A8%E6%96%87%E7%9A%84%E6%95%88%E6%9E%9C/"/>
      <url>/2020/07/05/%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E8%B6%85%E5%87%BA%E5%B1%95%E7%A4%BA%E5%B1%95%E5%BC%80%E5%85%A8%E6%96%87%E7%9A%84%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="实现文字超过固定行数时展示展开全文的功能"><a href="#实现文字超过固定行数时展示展开全文的功能" class="headerlink" title="实现文字超过固定行数时展示展开全文的功能"></a>实现文字超过固定行数时展示展开全文的功能</h2><ul><li>通过css方式实现超出5行隐藏文本内容  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span>;</span><br><span class="line"><span class="selector-tag">-webkit-line-clamp</span>: 5;</span><br><span class="line"><span class="selector-tag">-webkit-box-orient</span>: <span class="selector-tag">vertical</span>;</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br></pre></td></tr></table></figure></li><li>使用js方式计算line-height<h2 id="判断超出5行隐藏了"><a href="#判断超出5行隐藏了" class="headerlink" title="判断超出5行隐藏了"></a>判断超出5行隐藏了</h2></li><li>使用v-text渲染文本内容<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(dom.offsetHeight &lt; dom.scrollHeight) &#123;</span><br><span class="line">        <span class="comment">// 显示展开全文按钮</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="单行文本超出隐藏"><a href="#单行文本超出隐藏" class="headerlink" title="单行文本超出隐藏"></a>单行文本超出隐藏</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">wrap</span>;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 展示全文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数防抖与节流</title>
      <link href="/2020/07/05/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/"/>
      <url>/2020/07/05/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>参考文章</strong></p></blockquote><ul><li><a href="https://www.qinshenxue.com/article/what-is-debounce-and-throttle.html" target="_blank" rel="noopener"><strong>防抖与节流</strong></a></li><li><a href="https://juejin.im/post/5b8de829f265da43623c4261" target="_blank" rel="noopener">“7分钟了解js的防抖、节流以及使用场景”</a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2>前端中常见的监听鼠标移动、键盘输入、滚动条滚动等由于回调的频繁触发会带来严重的性能问题，而且界面的体验不是很 友好，为了解决这类问题，函数的防抖和节流随之出现。   <h2 id="常见的回调方式，以监听鼠标抬起为例"><a href="#常见的回调方式，以监听鼠标抬起为例" class="headerlink" title="常见的回调方式，以监听鼠标抬起为例"></a><strong>常见的回调方式，以监听鼠标抬起为例</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>,fn);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 需要执行的函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>存在的问题</strong></p></blockquote></li><li>回调函数会一直触发 <h2 id="防抖（debounce）"><a href="#防抖（debounce）" class="headerlink" title="防抖（debounce）"></a><strong>防抖（debounce）</strong></h2>在规定的时间间隔内，如果没有被再次触发，函数执行，否则清除定时器，重新执行   </li></ul><hr><blockquote><p>实现方式</p></blockquote><ul><li><strong>定时器</strong></li><li><strong>时间戳</strong><blockquote><p><strong>demo</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn,delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeoutId = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context =  <span class="keyword">this</span>; <span class="comment">//setTimeout会丢失上下文，重新绑定</span></span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>; <span class="comment">// 绑定的参数是传给了debounce函数，需要参数传递给fn</span></span><br><span class="line">        clearTimeout(timeoutId);</span><br><span class="line">        timeoutId = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            fn.apply(context,args);</span><br><span class="line">        &#125;,delay);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节流（throttle）"><a href="#节流（throttle）" class="headerlink" title="节流（throttle）"></a><strong>节流（throttle）</strong></h2>在规定的时间内，只执行第一次的触发，不会重新计时，时间间隔后执行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeoutId = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span>(!timeoutId) &#123;</span><br><span class="line">            timeoutId = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                fn.apply(context,args);</span><br><span class="line">                timeoutId = <span class="literal">null</span>;</span><br><span class="line">            &#125;,delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios终止请求</title>
      <link href="/2020/07/05/axois%E7%BB%88%E6%AD%A2%E8%AF%B7%E6%B1%82/"/>
      <url>/2020/07/05/axois%E7%BB%88%E6%AD%A2%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="axios中止单个网络请求"><a href="#axios中止单个网络请求" class="headerlink" title="axios中止单个网络请求"></a><code>axios中止单个网络请求</code></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken</span><br><span class="line">config.cancelToken = <span class="keyword">new</span> CancelToken(<span class="function">(<span class="params">cancel</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 存储并使用cancel</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="axios中止所有的网络请求"><a href="#axios中止所有的网络请求" class="headerlink" title="axios中止所有的网络请求"></a><code>axios中止所有的网络请求</code></h1><ul><li>使用CancelToken</li><li>在axios的请求拦截中，使用store存储每个请求的cancelToken实例</li><li>拦截路由，调用cancelToken()方法终止请求<h1 id="几种控制页面隐藏与显示的方式"><a href="#几种控制页面隐藏与显示的方式" class="headerlink" title="几种控制页面隐藏与显示的方式"></a><code>几种控制页面隐藏与显示的方式</code></h1><blockquote><p>opacity</p></blockquote></li></ul><ol><li>控制透明度</li><li>父级及子级事件生效</li><li>子级根据最小的opacity生效<blockquote><p>v-show</p></blockquote></li><li>本质使用display: none|block</li><li>不占位，元素节点存在</li><li>父级优先级<blockquote><p>v-if</p></blockquote></li><li>不占位</li><li>元素从页面中去除<h1 id="监听路由"><a href="#监听路由" class="headerlink" title="监听路由"></a><code>监听路由</code></h1><blockquote><p>使用watch</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    $route(to,<span class="keyword">from</span>) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">watch: &#123;</span><br><span class="line">    <span class="string">'$route'</span>: <span class="string">'method'</span></span><br><span class="line">&#125;</span><br><span class="line">watch: &#123;</span><br><span class="line">    $route: &#123;</span><br><span class="line">        handler: <span class="function"><span class="keyword">function</span>(<span class="params">to,from</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">        &#125;,</span><br><span class="line">        deep: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>vue-router的声明周期钩子</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter(to,<span class="keyword">from</span>,next) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">beforeRouteUpdate(to,<span class="keyword">from</span>,next) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">beforeRouteLeave(to,<span class="keyword">from</span>,next) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>全局路由拦截</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;)</span><br><span class="line">    router.beforeResolve(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;)</span><br><span class="line">    router.afterEach(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><blockquote><p>路由独享守卫</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: xxx,</span><br><span class="line">    name: xxx,</span><br><span class="line">    component: xxx,</span><br><span class="line">    beforeEnter: <span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
